/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as UnauthenticatedIndexImport } from './routes/unauthenticated/index'
import { Route as ResetPasswordIndexImport } from './routes/reset-password/index'
import { Route as RegisterIndexImport } from './routes/register/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as AuthenticatedProfileImport } from './routes/authenticated/profile'
import { Route as AuthenticatedHomeImport } from './routes/authenticated/home'
import { Route as RegisterSuccessIndexImport } from './routes/register/success/index'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UnauthenticatedIndexRoute = UnauthenticatedIndexImport.update({
  id: '/unauthenticated/',
  path: '/unauthenticated/',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordIndexRoute = ResetPasswordIndexImport.update({
  id: '/reset-password/',
  path: '/reset-password/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterIndexRoute = RegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedProfileRoute = AuthenticatedProfileImport.update({
  id: '/authenticated/profile',
  path: '/authenticated/profile',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedHomeRoute = AuthenticatedHomeImport.update({
  id: '/authenticated/home',
  path: '/authenticated/home',
  getParentRoute: () => rootRoute,
} as any)

const RegisterSuccessIndexRoute = RegisterSuccessIndexImport.update({
  id: '/register/success/',
  path: '/register/success/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/authenticated/home': {
      id: '/authenticated/home'
      path: '/authenticated/home'
      fullPath: '/authenticated/home'
      preLoaderRoute: typeof AuthenticatedHomeImport
      parentRoute: typeof rootRoute
    }
    '/authenticated/profile': {
      id: '/authenticated/profile'
      path: '/authenticated/profile'
      fullPath: '/authenticated/profile'
      preLoaderRoute: typeof AuthenticatedProfileImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/reset-password/': {
      id: '/reset-password/'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/unauthenticated/': {
      id: '/unauthenticated/'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedIndexImport
      parentRoute: typeof rootRoute
    }
    '/register/success/': {
      id: '/register/success/'
      path: '/register/success'
      fullPath: '/register/success'
      preLoaderRoute: typeof RegisterSuccessIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRoute
  '/authenticated/home': typeof AuthenticatedHomeRoute
  '/authenticated/profile': typeof AuthenticatedProfileRoute
  '/login': typeof LoginIndexRoute
  '/register': typeof RegisterIndexRoute
  '/reset-password': typeof ResetPasswordIndexRoute
  '/unauthenticated': typeof UnauthenticatedIndexRoute
  '/register/success': typeof RegisterSuccessIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRoute
  '/authenticated/home': typeof AuthenticatedHomeRoute
  '/authenticated/profile': typeof AuthenticatedProfileRoute
  '/login': typeof LoginIndexRoute
  '/register': typeof RegisterIndexRoute
  '/reset-password': typeof ResetPasswordIndexRoute
  '/unauthenticated': typeof UnauthenticatedIndexRoute
  '/register/success': typeof RegisterSuccessIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/authenticated/home': typeof AuthenticatedHomeRoute
  '/authenticated/profile': typeof AuthenticatedProfileRoute
  '/login/': typeof LoginIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/reset-password/': typeof ResetPasswordIndexRoute
  '/unauthenticated/': typeof UnauthenticatedIndexRoute
  '/register/success/': typeof RegisterSuccessIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/authenticated/home'
    | '/authenticated/profile'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/unauthenticated'
    | '/register/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/authenticated/home'
    | '/authenticated/profile'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/unauthenticated'
    | '/register/success'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/authenticated/home'
    | '/authenticated/profile'
    | '/login/'
    | '/register/'
    | '/reset-password/'
    | '/unauthenticated/'
    | '/register/success/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  AuthenticatedHomeRoute: typeof AuthenticatedHomeRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  LoginIndexRoute: typeof LoginIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
  ResetPasswordIndexRoute: typeof ResetPasswordIndexRoute
  UnauthenticatedIndexRoute: typeof UnauthenticatedIndexRoute
  RegisterSuccessIndexRoute: typeof RegisterSuccessIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  AuthenticatedHomeRoute: AuthenticatedHomeRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  LoginIndexRoute: LoginIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
  ResetPasswordIndexRoute: ResetPasswordIndexRoute,
  UnauthenticatedIndexRoute: UnauthenticatedIndexRoute,
  RegisterSuccessIndexRoute: RegisterSuccessIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/authenticated/home",
        "/authenticated/profile",
        "/login/",
        "/register/",
        "/reset-password/",
        "/unauthenticated/",
        "/register/success/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx"
    },
    "/authenticated/home": {
      "filePath": "authenticated/home.tsx"
    },
    "/authenticated/profile": {
      "filePath": "authenticated/profile.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/register/": {
      "filePath": "register/index.tsx"
    },
    "/reset-password/": {
      "filePath": "reset-password/index.tsx"
    },
    "/unauthenticated/": {
      "filePath": "unauthenticated/index.tsx"
    },
    "/register/success/": {
      "filePath": "register/success/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
